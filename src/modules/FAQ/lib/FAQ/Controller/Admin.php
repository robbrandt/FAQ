<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage FAQ
 */

class FAQ_Controller_Admin extends Zikula_AbstractController
{
    public function postInitialize()
    {
        $this->view->setCaching(false);
    }

    /**
     * the main administration function
     *
     * @author       The Zikula Development Team
     * @return       output       The main module admin page.
     */
    public function main()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'FAQ::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // Return the output that has been generated by this function
        return $this->view->fetch('faq_admin_main.htm');
    }

    /**
     * form to add new faq
     *
     * @author       The Zikula Development Team
     * @return       output       The main module admin page.
     */
    public function newfaq()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'FAQ::', '::', ACCESS_ADD)) {
            return LogUtil::registerPermissionError();
        }

        // Get the module vars
        $modvars = ModUtil::getVar('FAQ');

        if ($modvars['enablecategorization']) {
            // load the categories system
            if (!Loader::loadClass('CategoryRegistryUtil')) {
                z_exit($this->__f('Error! Unable to load class [%s%]', 'CategoryRegistryUtil'));
            }
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories ('FAQ', 'faqanswer');

            $this->view->assign('catregistry', $catregistry);
        }

        // Assign the module vars to the template
        $this->view->assign($modvars);

        // Return the output that has been generated by this function
        return $this->view->fetch('faq_admin_new.htm');
    }

    /**
     * Create an faq
     *
     * @author       The Zikula Development Team
     * @param        name         the name of the item to be created
     * @param        number       the number of the item to be created
     */
    public function create($args)
    {
        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('FAQ', 'admin', 'view'));
        }
        // Get parameters from whatever input we need
        $faq = FormUtil::getPassedValue('faq', isset($args['faq']) ? $args['faq'] : null, 'POST');

        // Create the FAQ
        $faqid = ModUtil::apiFunc('FAQ', 'admin', 'create', $faq);

        if ($faqid != false) {
            // Success
            LogUtil::registerStatus($this->__('Done! Item created.'));
        }

        return System::redirect(ModUtil::url('FAQ', 'admin', 'view'));
    }

    /**
     * modify an faq
     *
     * @author       The Zikula Development Team
     * @param        tid          the id of the item to be modified
     * @return       output       the modification page
     */
    public function modify($args)
    {
        $dom = ZLanguage::getModuleDomain('FAQ');
        $faqid = FormUtil::getPassedValue('faqid', isset($args['faqid']) ? $args['faqid'] : null, 'GET');
        $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');

        if (!empty($objectid)) {
            $faqid = $objectid;
        }

        // Security check
        if (!SecurityUtil::checkPermission('FAQ::', "$faqid::", ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        $item = ModUtil::apiFunc('FAQ', 'user', 'get', array('faqid' => $faqid));
        if (!$item) {
            return LogUtil::registerError($this->__('No such item found.'), 404);
        }

        // Assign the item
        $this->view->assign($item);

        // load the categories system
        if (!Loader::loadClass('CategoryRegistryUtil')) {
            z_exit($this->__f('Error! Unable to load class [%s%]', 'CategoryRegistryUtil'));
        }

        $categories = CategoryRegistryUtil::getRegisteredModuleCategories ('FAQ', 'faqanswer');
        $this->view->assign('categories', $categories);

        $this->view->assign(ModUtil::getVar('FAQ'));

        // Return the output that has been generated by this function
        return $this->view->fetch('faq_admin_modify.htm');
    }

    /**
     * update the faq
     *
     * @author       The Zikula Development Team
     * @param        tid          the id of the item to be modified
     * @param        name         the name of the item to be updated
     * @param        number       the number of the item to be updated
     */
    public function update($args)
    {
        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('FAQ', 'admin', 'view'));
        }

        $faq = FormUtil::getPassedValue('faq', isset($args['faq']) ? $args['faq'] : null, 'POST');
        if (!empty($faq['objectid'])) {
            $faq['faqid'] = $faq['objectid'];
        }

        // Update FAQ
        if (ModUtil::apiFunc('FAQ', 'admin', 'update', $faq)) {
            // Success
            LogUtil::registerStatus($this->__('Done! Item updated.'));
        }

        return System::redirect(ModUtil::url('FAQ', 'admin', 'view'));
    }

    /**
     * delete an faq
     *
     * @author       The Zikula Development Team
     * @param        tid            the id of the item to be modified
     * @param        confirmation   confirmation that this item can be deleted
     */
    public function delete($args)
    {
        $dom = ZLanguage::getModuleDomain('FAQ');

        $faqid = FormUtil::getPassedValue('faqid', isset($args['faqid']) ? $args['faqid'] : null, 'REQUEST');
        $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
        $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
        if (!empty($objectid)) {
            $faqid = $objectid;
        }

        // Get the current FAQ
        $item = ModUtil::apiFunc('FAQ', 'user', 'get', array('faqid' => $faqid));

        if (!$item) {
            return LogUtil::registerError($this->__('No such item found.'), 404);
        }

        // Security check
        if (!SecurityUtil::checkPermission( 'FAQ::', "$faqid::", ACCESS_DELETE)) {
            return LogUtil::registerPermissionError();
        }

        // Check for confirmation.
        if (empty($confirmation)) {
            // No confirmation yet

            // Add a hidden field for the item ID to the output
            $this->view->assign('faqid', $faqid);

            // Return the output that has been generated by this function
            return $this->view->fetch('faq_admin_delete.htm');
        }

        // If we get here it means that the user has confirmed the action

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('FAQ', 'admin', 'view'));
        }

        // delete the faq
        if (ModUtil::apiFunc('FAQ', 'admin', 'delete', array('faqid' => $faqid))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Item deleted.'));
        }

        return System::redirect(ModUtil::url('FAQ', 'admin', 'view'));
    }

    /**
     * view items
     *
     * This function shows all items and lists the administration
     * options.
     *
     * @author       The Zikula Development Team
     * @param        startnum     The number of the first item to show
     * @return       output       The main module admin page
     */
    public function view($args)
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'FAQ::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
        $property = FormUtil::getPassedValue('faq_property', isset($args['faq_property']) ? $args['faq_property'] : null, 'POST');
        $category = FormUtil::getPassedValue("faq_{$property}_category", isset($args["faq_{$property}_category"]) ? $args["faq_{$property}_category"] : null, 'POST');
        $clear    = FormUtil::getPassedValue('clear', false, 'POST');
        $purge    = FormUtil::getPassedValue('purge', false, 'GET');

        if ($purge) {
            if (ModUtil::apiFunc('FAQ', 'admin', 'purgepermalinks')) {
                LogUtil::registerStatus($this->__('Purging of the pemalinks was successful'));
            } else {
                LogUtil::registerError($this->__('Purging of the pemalinks has failed'));
            }
            return System::redirect(strpos(System::serverGetVar('HTTP_REFERER'), 'purge') ? ModUtil::url('FAQ', 'admin', 'view') : System::serverGetVar('HTTP_REFERER'));
        }
        if ($clear) {
            $property = null;
            $category = null;
        }

        // get module vars for later use
        $modvars = ModUtil::getVar('FAQ');

        if ($modvars['enablecategorization']) {
            // load the category registry util
            if (!Loader::loadClass('CategoryRegistryUtil')) {
                z_exit($this->__f('Error! Unable to load class [%s%]', 'CategoryRegistryUtil'));
            }
            $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('FAQ', 'faqanswer');
            $properties = array_keys($catregistry);

            // Validate and build the category filter - mateo
            if (!empty($property) && in_array($property, $properties) && !empty($category)) {
                $catFilter = array($property => $category);
            }

            // Assign a default property - mateo
            if (empty($property) || !in_array($property, $properties)) {
                $property = $properties[0];
            }

            // plan ahead for ML features
            $propArray = array();
            foreach ($properties as $prop) {
                $propArray[$prop] = $prop;
            }
        }

        // get all faq's
        $items = ModUtil::apiFunc('FAQ', 'user', 'getall',
                array('startnum' => $startnum,
                'numitems' => $modvars['itemsperpage'],
                'category' => isset($catFilter) ? $catFilter : null,
                'catregistry'  => isset($catregistry) ? $catregistry : null));

        foreach ($items as $key => $item) {
            $options = array();
            if (SecurityUtil::checkPermission( 'FAQ::', "$item[faqid]::", ACCESS_EDIT)) {
                $options[] = array('url'   => ModUtil::url('FAQ', 'admin', 'modify', array('faqid' => $item['faqid'])),
                        'image' => 'xedit.gif',
                        'title' => $this->__('Edit'));
                if (SecurityUtil::checkPermission( 'FAQ::', "$item[faqid]::", ACCESS_DELETE)) {
                    $options[] = array('url'   => ModUtil::url('FAQ', 'admin', 'delete', array('faqid' => $item['faqid'])),
                            'image' => '14_layer_deletelayer.gif',
                            'title' => $this->__('Delete'));
                }
            }

            // Add the calculated menu options to the item array
            $items[$key]['options'] = $options;
        }

        // Assign the items and modvars to the template
        $this->view->assign('faqs', $items);
        $this->view->assign($modvars);

        // Assign the default language
        $this->view->assign('lang', ZLanguage::getLanguageCode());

        // Assign the categories information if enabled
        if ($modvars['enablecategorization']) {
            $this->view->assign('catregistry', $catregistry);
            $this->view->assign('numproperties', count($propArray));
            $this->view->assign('properties', $propArray);
            $this->view->assign('property', $property);
            $this->view->assign("category", $category);
        }

        // assign the values for the smarty plugin to produce a pager
        $this->view->assign('pager', array('numitems' => ModUtil::apiFunc('FAQ', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                'itemsperpage' => $modvars['itemsperpage']));

        // Return the output that has been generated by this function
        return $this->view->fetch('faq_admin_view.htm');
    }

    /**
     * Modify configuration
     *
     * This is a standard function to modify the configuration parameters of the
     * module
     *
     * @author       The Zikula Development Team
     * @return       output       The configuration page
     */
    public function modifyconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'FAQ::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Assign all module vars
        $this->view->assign(ModUtil::getVar('FAQ'));

        // Return the output that has been generated by this function
        return $this->view->fetch('faq_admin_modifyconfig.htm');
    }

    /**
     * Update the configuration
     *
     * This is a standard function to update the configuration parameters of the
     * module given the information passed back by the modification form
     * Modify configuration
     *
     * @author       The Zikula Development Team
     * @param        itemsperpage   number of items per page
     */
    public function updateconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'FAQ::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('FAQ', 'admin', 'view'));
        }

        // Update module variables
        $itemsperpage = FormUtil::getPassedValue('itemsperpage', 25, 'POST');
        $this->setVar('itemsperpage', $itemsperpage);

        $enablecategorization = (bool)FormUtil::getPassedValue('enablecategorization', false, 'POST');
        $this->setVar('enablecategorization', $enablecategorization);

        $addcategorytitletopermalink = (bool)FormUtil::getPassedValue('addcategorytitletopermalink', false, 'POST');
        $this->setVar('addcategorytitletopermalink', $addcategorytitletopermalink);

        // The configuration has been changed, so we clear all caches for this module.
        $this->view->clear_all_cache();

        // Let any other modules know that the modules configuration has been updated
        $this->callHooks('module','updateconfig','FAQ', array('module' => 'FAQ'));

        // the module configuration has been updated successfuly
        LogUtil::registerStatus($this->__('Done! Module configuration updated.'));

        return System::redirect(ModUtil::url('FAQ', 'admin', 'view'));
    }
}